{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gameoflife/./src/Game.ts","webpack://gameoflife/./src/index.ts"],"sourcesContent":["interface IGame {\n  rows: number;\n  cols: number;\n  playing: boolean;\n  grid: number[];\n  nextGrid: number[];\n  timer: number;\n  reproductionTime: number;\n  gameCondtition: boolean;\n  gridContainer: HTMLElement;\n  table: HTMLTableElement;\n  startButton: HTMLElement;\n  clearButton: HTMLElement;\n  xValue: HTMLInputElement;\n  yValue: HTMLInputElement;\n  speedSelect: HTMLElement;\n  initializeGrids: () => void;\n  resetGrids: () => void;\n  copyAndResetGrid: () => void;\n  initialize: () => void;\n  createTable(): boolean;\n  cellClickHandler: (e: HTMLSelectElement) => void;\n  updateView: (gridApp: number[][]) => void;\n  setupControlButtons: () => void;\n  randomButtonHandler: () => void;\n  clearButtonHandler: () => void;\n  speedHandler: (value: EventTarget) => void;\n  startButtonHandler: (e: HTMLElement) => void;\n  play: (grid: number[][]) => void;\n  computeNextGen: () => void;\n  applyRules: (col: number, row: number) => void;\n  countNeighbors(col: number, row: number): number;\n}\n\nexport class Game {\n  rows = 50;\n\n  cols = 50;\n\n  playing = false;\n\n  timer = 0;\n\n  reproductionTime = 1000;\n\n  grid = new Array(this.rows);\n\n  nextGrid = new Array(this.rows);\n\n  gameCondtition = false;\n\n  gridContainer = Object.create(HTMLElement.prototype, {});\n\n  startButton = Object.create(HTMLElement.prototype, {});\n\n  clearButton = Object.create(HTMLElement.prototype, {});\n\n  xValue = Object.create(HTMLElement.prototype, {});\n\n  yValue = Object.create(HTMLElement.prototype, {});\n\n  speedSelect = Object.create(HTMLElement.prototype, {});\n\n  table = Object.create(HTMLTableElement.prototype, {});\n\n  initializeGrids() {\n    for (let i = 0; i < this.rows; i++) {\n      this.grid[i] = new Array(this.cols);\n      this.nextGrid[i] = new Array(this.cols);\n    }\n  }\n\n  resetGrids() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.grid[i][j] = 0;\n        this.nextGrid[i][j] = 0;\n      }\n    }\n  }\n\n  copyAndResetGrid() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.grid[i][j] = this.nextGrid[i][j];\n        this.nextGrid[i][j] = 0;\n      }\n    }\n  }\n\n  initialize() {\n    if (document.readyState === \"complete\") {\n      this.createTable();\n      this.initializeGrids();\n      this.resetGrids();\n      this.setupControlButtons();\n    }\n  }\n\n  createTable() {\n    let result = false;\n    this.gridContainer = document.getElementById(\n      \"gridContainer\"\n    ) as HTMLElement;\n    if (!this.gridContainer) {\n      console.error(\"Нет контейнера для поля игры\");\n    }\n    this.table = document.createElement(\"table\") as HTMLTableElement;\n\n    for (let i = 0; i < this.rows; i++) {\n      const tr = document.createElement(\"tr\");\n      for (let j = 0; j < this.cols; j++) {\n        const cell = document.createElement(\"td\") as HTMLTableCellElement;\n        let sc = \"\";\n        sc = sc.concat(String(i), \"_\", String(j));\n        cell.setAttribute(\"id\", sc);\n        cell.setAttribute(\"class\", \"dead\");\n        // cell.onclick = this.cellClickHandler();\n        cell.addEventListener(\"click\", (e) => {\n          this.cellClickHandler(cell);\n        });\n        tr.appendChild(cell);\n      }\n      this.table.appendChild(tr);\n    }\n    this.gridContainer.appendChild(this.table);\n    result = true;\n    return result;\n  }\n\n  cellClickHandler(e: HTMLElement) {\n    const rowcol = e.id.split(\"_\");\n    const row = Number(rowcol[0]);\n    const col = Number(rowcol[1]);\n\n    const classes = e.getAttribute(\"class\") as string;\n    if (classes.indexOf(\"live\") > -1) {\n      e.setAttribute(\"class\", \"dead\");\n      this.grid[row][col] = 0;\n    } else {\n      e.setAttribute(\"class\", \"live\");\n      this.grid[row][col] = 1;\n    }\n    this.gameCondtition = true;\n  }\n\n  updateView(gridApp: number[][]) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let sc = \"\";\n        sc = sc.concat(String(i), \"_\", String(j));\n        const cell = document.getElementById(sc) as HTMLElement;\n        if (gridApp[i][j] === 0) {\n          cell.setAttribute(\"class\", \"dead\");\n        }\n        if (gridApp[i][j] === 2) {\n          cell.setAttribute(\"class\", \"pre\");\n        }\n        if (gridApp[i][j] === 1) {\n          cell.setAttribute(\"class\", \"live\");\n        }\n      }\n    }\n  }\n\n  setupControlButtons() {\n    this.startButton = document.getElementById(\"start\") as HTMLElement;\n\n    this.startButton.addEventListener(\"click\", () => {\n      this.startButtonHandler(this.startButton);\n    });\n\n    this.clearButton = document.getElementById(\"clear\") as HTMLElement;\n\n    this.clearButton.addEventListener(\"click\", () => {\n      this.clearButtonHandler();\n    });\n\n    const randomButton = document.getElementById(\"random\") as HTMLElement;\n\n    randomButton.addEventListener(\"click\", () => {\n      this.randomButtonHandler();\n    });\n    this.speedSelect = document.getElementById(\"speed\") as HTMLElement;\n    let listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x1\";\n    this.speedSelect.append(listItem);\n    listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x2\";\n    this.speedSelect.append(listItem);\n    listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x4\";\n    this.speedSelect.append(listItem);\n    this.speedSelect.addEventListener(\"change\", (e: Event) => {\n      this.speedHandler(e.target as HTMLSelectElement);\n    });\n    this.xValue = document.getElementById(\"x-ax\") as HTMLInputElement;\n    this.yValue = document.getElementById(\"y-ax\") as HTMLInputElement;\n    this.xValue.value = this.rows.toString();\n    this.yValue.value = this.cols.toString();\n  }\n\n  randomButtonHandler() {\n    if (this.playing) return;\n    this.clearButtonHandler();\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        const isLive = Math.round(Math.random());\n        if (isLive === 1) {\n          let sc = \"\";\n          sc = sc.concat(String(i), \"_\", String(j));\n          const cell = document.getElementById(sc) as HTMLTableCellElement;\n          cell.setAttribute(\"class\", \"live\");\n          this.grid[i][j] = 1;\n        }\n      }\n    }\n    this.gameCondtition = true;\n  }\n\n  clearButtonHandler() {\n    console.clear();\n    if (this.xValue.value !== undefined && this.xValue.value !== \"\") {\n      if (this.yValue.value !== undefined && this.yValue.value !== \"\") {\n        if (this.playing === true) {\n          this.playing = false;\n          const newRows = Number(this.xValue.value);\n          const newCols = Number(this.yValue.value);\n\n          const newGrid = new Array(newRows);\n          const newNextGrid = new Array(newRows);\n          for (let i = 0; i < newRows; i++) {\n            newGrid[i] = new Array(newCols);\n            newNextGrid[i] = new Array(newCols);\n          }\n\n          for (let i = 0; i < newRows; i++) {\n            for (let j = 0; j < newCols; j++) {\n              if (i < this.rows)\n                if (j < this.cols) {\n                  console.log(i, j);\n                  newGrid[i][j] = this.grid[i][j];\n                  newNextGrid[i][j] = this.grid[i][j];\n                } else {\n                  newGrid[i][j] = 0;\n                  newNextGrid[i][j] = 0;\n                }\n            }\n          }\n          this.rows = newRows;\n          this.cols = newCols;\n          this.grid = newGrid;\n          this.nextGrid = newNextGrid;\n\n          this.gridContainer.innerHTML = \"\";\n          this.createTable();\n          this.updateView(this.grid);\n          this.playing = true;\n        } else {\n          this.playing = false;\n          // const startButton = document.getElementById(\"start\") as HTMLElement;\n          this.startButton.innerHTML = \"Старт\";\n          clearTimeout(this.timer);\n\n          const cellsList = document.getElementsByClassName(\"live\");\n\n          const cells = [];\n          for (let i = 0; i < cellsList.length; i++) {\n            cells.push(cellsList[i]);\n          }\n\n          for (let i = 0; i < cells.length; i++) {\n            cells[i].setAttribute(\"class\", \"dead\");\n          }\n          this.resetGrids();\n          this.rows = Number(this.xValue.value);\n          this.cols = Number(this.yValue.value);\n\n          this.gridContainer.innerHTML = \"\";\n\n          this.grid = new Array(this.rows);\n\n          this.nextGrid = new Array(this.rows);\n\n          this.createTable();\n          this.initializeGrids();\n          this.resetGrids();\n        }\n      }\n    }\n  }\n\n  speedHandler(e: HTMLSelectElement) {\n    const speedValue = e.value;\n    if (speedValue === \"x1\") {\n      this.reproductionTime = 1000;\n    }\n    if (speedValue === \"x2\") {\n      this.reproductionTime = 500;\n    }\n    if (speedValue === \"x4\") {\n      this.reproductionTime = 250;\n    }\n  }\n\n  startButtonHandler(e: HTMLElement) {\n    this.clearButton.innerHTML = \"Обновить\";\n    if (this.gameCondtition === true) {\n      if (this.playing) {\n        this.playing = false;\n        e.innerHTML = \"Продолжить\";\n        clearTimeout(this.timer);\n      } else {\n        this.playing = true;\n        e.innerHTML = \"Пауза\";\n        this.play(this.grid);\n      }\n    }\n  }\n\n  play(grid: number[][]) {\n    this.computeNextGen();\n\n    if (this.playing && this.gameCondtition === true) {\n      setTimeout(() => this.play(this.grid), this.reproductionTime);\n      // console.log(this.timer);\n    }\n  }\n\n  computeNextGen() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.applyRules(i, j);\n      }\n    }\n\n    this.copyAndResetGrid();\n    this.updateView(this.grid);\n\n    const arr = this.grid.flat(Infinity).filter((val) => val > 0);\n    console.log(arr);\n    if (arr.length === 0) {\n      this.gameCondtition = false;\n      this.playing = false;\n      // const startButton = document.getElementById(\"start\") as HTMLElement;\n      this.startButton.innerHTML = \"Старт\";\n      // alert(\"Игра завершена!\");\n    }\n  }\n\n  applyRules(row: number, col: number) {\n    const numNeighbors = this.countNeighbors(row, col);\n    if (this.grid[row][col] === 1) {\n      if (numNeighbors < 2) {\n        this.nextGrid[row][col] = 2;\n      } else if (numNeighbors === 2 || numNeighbors === 3) {\n        this.nextGrid[row][col] = 1;\n      } else if (numNeighbors > 3) {\n        this.nextGrid[row][col] = 2;\n      }\n    } else if (this.grid[row][col] === 0) {\n      if (numNeighbors === 3) {\n        this.nextGrid[row][col] = 1;\n      }\n    }\n    if (this.grid[row][col] === 2) {\n      this.nextGrid[row][col] = 0;\n    }\n  }\n\n  countNeighbors(row: number, col: number) {\n    let count = 0;\n    if (row - 1 >= 0) {\n      if (this.grid[row - 1][col] === 1) count++;\n    }\n    if (row - 1 >= 0 && col - 1 >= 0) {\n      if (this.grid[row - 1][col - 1] === 1) count++;\n    }\n    if (row - 1 >= 0 && col + 1 < this.cols) {\n      if (this.grid[row - 1][col + 1] === 1) count++;\n    }\n    if (col - 1 >= 0) {\n      if (this.grid[row][col - 1] === 1) count++;\n    }\n    if (col + 1 < this.cols) {\n      if (this.grid[row][col + 1] === 1) count++;\n    }\n    if (row + 1 < this.rows) {\n      if (this.grid[row + 1][col] === 1) count++;\n    }\n    if (row + 1 < this.rows && col - 1 >= 0) {\n      if (this.grid[row + 1][col - 1] === 1) count++;\n    }\n    if (row + 1 < this.rows && col + 1 < this.cols) {\n      if (this.grid[row + 1][col + 1] === 1) count++;\n    }\n    return count;\n  }\n}\n","import \"../css/style.css\";\nimport { Game } from \"./Game\";\n\nconst myGame = new Game();\nconsole.log(myGame);\nwindow.onload = () => {\n  myGame.initialize();\n};\n"],"names":["myGame","Array","this","rows","Object","create","HTMLElement","prototype","HTMLTableElement","i","grid","cols","nextGrid","j","document","readyState","createTable","initializeGrids","resetGrids","setupControlButtons","gridContainer","getElementById","console","error","table","createElement","tr","cell","sc","concat","String","setAttribute","addEventListener","e","cellClickHandler","appendChild","rowcol","id","split","row","Number","col","getAttribute","indexOf","gameCondtition","gridApp","startButton","startButtonHandler","clearButton","clearButtonHandler","randomButtonHandler","speedSelect","listItem","innerText","append","speedHandler","target","xValue","yValue","value","toString","playing","Math","round","random","clear","undefined","newRows","newCols","newGrid","newNextGrid","log","innerHTML","updateView","clearTimeout","timer","cellsList","getElementsByClassName","cells","length","push","speedValue","reproductionTime","play","computeNextGen","setTimeout","applyRules","copyAndResetGrid","arr","flat","Infinity","filter","val","numNeighbors","countNeighbors","count","window","onload","initialize"],"sourceRoot":""}