{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gameoflife/./src/Game.ts","webpack://gameoflife/./src/index.ts"],"sourcesContent":["interface IGame {\n  rows: number;\n  cols: number;\n  playing: boolean;\n  grid: number[];\n  nextGrid: number[];\n  timer: number;\n  reproductionTime: number;\n  gameCondtition: boolean;\n  initializeGrids: () => void;\n  resetGrids: () => void;\n  copyAndResetGrid: () => void;\n  initialize: () => void;\n  createTable(): boolean;\n  cellClickHandler: (e: HTMLSelectElement) => void;\n  updateView: (gridApp: number[][]) => void;\n  setupControlButtons: () => void;\n  randomButtonHandler: () => void;\n  clearButtonHandler: () => void;\n  speedHandler: (value: EventTarget) => void;\n  startButtonHandler: (e: HTMLElement) => void;\n  play: (grid: number[][]) => void;\n  computeNextGen: () => void;\n  applyRules: (col: number, row: number) => void;\n  countNeighbors(col: number, row: number): number;\n}\n\nexport class Game {\n  rows = 50;\n\n  cols = 50;\n\n  playing = false;\n\n  timer = 0;\n\n  reproductionTime = 1000;\n\n  grid = new Array(this.rows);\n\n  nextGrid = new Array(this.rows);\n\n  gameCondtition = false;\n\n  initializeGrids() {\n    for (let i = 0; i < this.rows; i++) {\n      this.grid[i] = new Array(this.cols);\n      this.nextGrid[i] = new Array(this.cols);\n    }\n  }\n\n  resetGrids() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.grid[i][j] = 0;\n        this.nextGrid[i][j] = 0;\n      }\n    }\n  }\n\n  copyAndResetGrid() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.grid[i][j] = this.nextGrid[i][j];\n        this.nextGrid[i][j] = 0;\n      }\n    }\n  }\n\n  initialize() {\n    if (document.readyState === \"complete\") {\n      this.createTable();\n      this.initializeGrids();\n      this.resetGrids();\n      this.setupControlButtons();\n    }\n  }\n\n  createTable() {\n    let result = false;\n    const gridContainer = document.getElementById(\n      \"gridContainer\"\n    ) as HTMLElement;\n    if (!gridContainer) {\n      console.error(\"Problem: No div for the drid table!\");\n    }\n    const table = document.createElement(\"table\") as HTMLTableElement;\n\n    for (let i = 0; i < this.rows; i++) {\n      const tr = document.createElement(\"tr\");\n      for (let j = 0; j < this.cols; j++) {\n        const cell = document.createElement(\"td\") as HTMLTableCellElement;\n        let sc = \"\";\n        sc = sc.concat(String(i), \"_\", String(j));\n        cell.setAttribute(\"id\", sc);\n        cell.setAttribute(\"class\", \"dead\");\n        // cell.onclick = this.cellClickHandler();\n        cell.addEventListener(\"click\", (e) => {\n          this.cellClickHandler(cell);\n        });\n        tr.appendChild(cell);\n      }\n      table.appendChild(tr);\n    }\n    gridContainer.appendChild(table);\n    result = true;\n    return result;\n  }\n\n  cellClickHandler(e: HTMLElement) {\n    const rowcol = e.id.split(\"_\");\n    const row = Number(rowcol[0]);\n    const col = Number(rowcol[1]);\n\n    const classes = e.getAttribute(\"class\") as string;\n    if (classes.indexOf(\"live\") > -1) {\n      e.setAttribute(\"class\", \"dead\");\n      this.grid[row][col] = 0;\n    } else {\n      e.setAttribute(\"class\", \"live\");\n      this.grid[row][col] = 1;\n    }\n  }\n\n  updateView(gridApp: number[][]) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        let sc = \"\";\n        sc = sc.concat(String(i), \"_\", String(j));\n        const cell = document.getElementById(sc) as HTMLElement;\n        if (gridApp[i][j] === 0) {\n          cell.setAttribute(\"class\", \"dead\");\n        }\n        if (gridApp[i][j] === 2) {\n          cell.setAttribute(\"class\", \"pre\");\n        }\n        if (gridApp[i][j] === 1) {\n          cell.setAttribute(\"class\", \"live\");\n        }\n      }\n    }\n  }\n\n  setupControlButtons() {\n    const startButton = document.getElementById(\"start\") as HTMLElement;\n\n    startButton.addEventListener(\"click\", () => {\n      this.startButtonHandler(startButton);\n    });\n\n    const clearButton = document.getElementById(\"clear\") as HTMLElement;\n\n    clearButton.addEventListener(\"click\", (e) => {\n      this.clearButtonHandler();\n    });\n\n    const randomButton = document.getElementById(\"random\") as HTMLElement;\n\n    randomButton.addEventListener(\"click\", (e) => {\n      this.randomButtonHandler();\n    });\n    const speedSelect = document.getElementById(\"speed\") as HTMLElement;\n    let listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x1\";\n    speedSelect.append(listItem);\n    listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x2\";\n    speedSelect.append(listItem);\n    listItem = document.createElement(\"option\") as HTMLElement;\n    listItem.innerText = \"x4\";\n    speedSelect.append(listItem);\n\n    speedSelect.addEventListener(\"change\", (e) => {\n      this.speedHandler(e.target as HTMLSelectElement);\n    });\n  }\n\n  randomButtonHandler() {\n    if (this.playing) return;\n    this.clearButtonHandler();\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        const isLive = Math.round(Math.random());\n        if (isLive === 1) {\n          let sc = \"\";\n          sc = sc.concat(String(i), \"_\", String(j));\n          const cell = document.getElementById(sc) as HTMLTableCellElement;\n          cell.setAttribute(\"class\", \"live\");\n          this.grid[i][j] = 1;\n        }\n      }\n    }\n    this.gameCondtition = true;\n  }\n\n  clearButtonHandler() {\n    const xValue = document.getElementById(\"x-ax\") as HTMLInputElement;\n    const yValue = document.getElementById(\"y-ax\") as HTMLInputElement;\n\n    if (xValue.value !== undefined && xValue.value !== \"\") {\n      if (yValue.value !== undefined && yValue.value !== \"\") {\n        this.playing = false;\n        const startButton = document.getElementById(\"start\") as HTMLElement;\n        startButton.innerHTML = \"Старт\";\n        clearTimeout(this.timer);\n\n        const cellsList = document.getElementsByClassName(\"live\");\n\n        const cells = [];\n        for (let i = 0; i < cellsList.length; i++) {\n          cells.push(cellsList[i]);\n        }\n\n        for (let i = 0; i < cells.length; i++) {\n          cells[i].setAttribute(\"class\", \"dead\");\n        }\n        this.resetGrids();\n        this.rows = Number(xValue.value);\n        this.cols = Number(yValue.value);\n        const gridContainer = document.getElementById(\n          \"gridContainer\"\n        ) as HTMLElement;\n        gridContainer.innerHTML = \"\";\n\n        this.grid = new Array(this.rows);\n\n        this.nextGrid = new Array(this.rows);\n\n        this.createTable();\n        this.initializeGrids();\n        this.resetGrids();\n      }\n    }\n  }\n\n  speedHandler(e: HTMLSelectElement) {\n    const speedValue = e.value;\n    if (speedValue === \"x1\") {\n      this.reproductionTime = 1000;\n    }\n    if (speedValue === \"x2\") {\n      this.reproductionTime = 500;\n    }\n    if (speedValue === \"x4\") {\n      this.reproductionTime = 250;\n    }\n  }\n\n  startButtonHandler(e: HTMLElement) {\n    if (this.gameCondtition === true) {\n      if (this.playing) {\n        this.playing = false;\n        e.innerHTML = \"Продолжить\";\n        clearTimeout(this.timer);\n      } else {\n        this.playing = true;\n        e.innerHTML = \"Пауза\";\n\n        const speedSelect = document.getElementById(\n          \"speed\"\n        ) as HTMLInputElement;\n        const speedValue = speedSelect.value;\n        if (speedValue === \"x1\") {\n          this.reproductionTime = 1000;\n        }\n        if (speedValue === \"x2\") {\n          this.reproductionTime = 500;\n        }\n        if (speedValue === \"x4\") {\n          this.reproductionTime = 250;\n        }\n\n        this.play(this.grid);\n      }\n    }\n  }\n\n  play(grid: number[][]) {\n    this.computeNextGen();\n\n    if (this.playing && this.gameCondtition === true) {\n      setTimeout(() => this.play(this.grid), this.reproductionTime);\n      // console.log(this.timer);\n    }\n  }\n\n  computeNextGen() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        this.applyRules(i, j);\n      }\n    }\n\n    this.copyAndResetGrid();\n    this.updateView(this.grid);\n\n    const arr = this.grid.flat(Infinity).filter((val) => val > 0);\n    console.log(arr);\n    if (arr.length === 0) {\n      this.gameCondtition = false;\n      this.playing = false;\n      const startButton = document.getElementById(\"start\") as HTMLElement;\n      startButton.innerHTML = \"Старт\";\n      // alert(\"Игра завершена!\");\n    }\n  }\n\n  applyRules(row: number, col: number) {\n    const numNeighbors = this.countNeighbors(row, col);\n    if (this.grid[row][col] === 1) {\n      if (numNeighbors < 2) {\n        this.nextGrid[row][col] = 2;\n      } else if (numNeighbors === 2 || numNeighbors === 3) {\n        this.nextGrid[row][col] = 1;\n      } else if (numNeighbors > 3) {\n        this.nextGrid[row][col] = 2;\n      }\n    } else if (this.grid[row][col] === 0) {\n      if (numNeighbors === 3) {\n        this.nextGrid[row][col] = 1;\n      }\n    }\n    if (this.grid[row][col] === 2) {\n      this.nextGrid[row][col] = 0;\n    }\n  }\n\n  countNeighbors(row: number, col: number) {\n    let count = 0;\n    if (row - 1 >= 0) {\n      if (this.grid[row - 1][col] === 1) count++;\n    }\n    if (row - 1 >= 0 && col - 1 >= 0) {\n      if (this.grid[row - 1][col - 1] === 1) count++;\n    }\n    if (row - 1 >= 0 && col + 1 < this.cols) {\n      if (this.grid[row - 1][col + 1] === 1) count++;\n    }\n    if (col - 1 >= 0) {\n      if (this.grid[row][col - 1] === 1) count++;\n    }\n    if (col + 1 < this.cols) {\n      if (this.grid[row][col + 1] === 1) count++;\n    }\n    if (row + 1 < this.rows) {\n      if (this.grid[row + 1][col] === 1) count++;\n    }\n    if (row + 1 < this.rows && col - 1 >= 0) {\n      if (this.grid[row + 1][col - 1] === 1) count++;\n    }\n    if (row + 1 < this.rows && col + 1 < this.cols) {\n      if (this.grid[row + 1][col + 1] === 1) count++;\n    }\n    return count;\n  }\n}\n","import \"../css/style.css\";\nimport { Game } from \"./Game\";\n\nconst myGame = new Game();\nconsole.log(myGame);\nwindow.onload = () => {\n  myGame.initialize();\n};\n"],"names":["myGame","Array","this","rows","i","grid","cols","nextGrid","j","document","readyState","createTable","initializeGrids","resetGrids","setupControlButtons","gridContainer","getElementById","console","error","table","createElement","tr","cell","sc","concat","String","setAttribute","addEventListener","e","cellClickHandler","appendChild","rowcol","id","split","row","Number","col","getAttribute","indexOf","gridApp","startButton","startButtonHandler","clearButtonHandler","randomButtonHandler","speedSelect","listItem","innerText","append","speedHandler","target","playing","Math","round","random","gameCondtition","xValue","yValue","undefined","value","innerHTML","clearTimeout","timer","cellsList","getElementsByClassName","cells","length","push","speedValue","reproductionTime","play","computeNextGen","setTimeout","applyRules","copyAndResetGrid","updateView","arr","flat","Infinity","filter","val","log","numNeighbors","countNeighbors","count","window","onload","initialize"],"sourceRoot":""}